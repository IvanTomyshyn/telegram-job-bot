import os
import json
import logging
from datetime import datetime
from flask import Flask, request

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    Filters
)
from google_sheets import write_to_google_sheet

# === Flask ===
app = Flask(__name__)
TOKEN = os.environ.get("TOKEN")
bot = Bot(token=TOKEN)

# === Dispatcher ===
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=4, use_context=True)

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ó–º—ñ–Ω–Ω—ñ ===
GREETING_FILE = 'hello.txt'
DESCRIPTIONS_FILE = 'vacancy_descriptions'
GROUPS_FILE = 'vacancy_groups'
VIDEO_PATH = 'intro.mp4'
ASK_NAME, ASK_PHONE, ASK_AGE = range(3)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
def load_greeting():
    with open(GREETING_FILE, 'r', encoding='utf-8') as file:
        return file.read()

def load_descriptions():
    with open(DESCRIPTIONS_FILE, 'r', encoding='utf-8') as file:
        blocks = file.read().split('\n\n')
        return {block.split(':\n')[0].strip(): block.split(':\n')[1].strip() for block in blocks if ':\n' in block}

def load_groups():
    with open(GROUPS_FILE, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    groups = {
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤': [],
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫': [],
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä': []
    }
    for line in lines:
        if '-' in line:
            title, group = line.strip().split(' - ')
            if group in groups:
                groups[group].append(title.strip())
    return groups

# === –ê–Ω–∫–µ—Ç–∞ ===
def submit_form(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    try:
        name = user_data.get("name")
        phone = user_data.get("phone")
        age = user_data.get("age")
        vacancy = user_data.get("vacancy")
        source = user_data.get("source", "Telegram")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        write_to_google_sheet([timestamp, name, phone, age, vacancy, source])

        context.bot.send_message(
            chat_id="@robota_cz_24_7",
            text=f"üÜï –ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞:\n\nüë§ –Ü–º'—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüéÇ –í—ñ–∫: {age}\nüíº –í–∞–∫–∞–Ω—Å—ñ—è: {vacancy}"
        )
        update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ.")
    except Exception as e:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê —É submit_form: {e}")
    return ConversationHandler.END

def cancel_form(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# === –ö–æ–º–∞–Ω–¥–∏ ===
def start(update: Update, context: CallbackContext):
    greeting = load_greeting()
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª—ñ", callback_data='next')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(greeting)
    try:
        with open(VIDEO_PATH, 'rb') as video:
            update.message.reply_video(video)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {e}")
    update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=reply_markup)

def handle_next(query, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üíÅüèª‚Äç‚ôÇÔ∏è–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤')],
        [InlineKeyboardButton("üíÅüèº‚Äç‚ôÄÔ∏è–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫')],
        [InlineKeyboardButton("üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä')]
    ]
    query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞–∫–∞–Ω—Å—ñ–π:", reply_markup=InlineKeyboardMarkup(keyboard))

def show_vacancies_by_group(query, group_name):
    groups = load_groups()
    group_vacancies = groups.get(group_name, [])
    keyboard = [[InlineKeyboardButton(title, callback_data=f'vacancy_{title}')] for title in group_vacancies]
    query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –≤–∞–∫–∞–Ω—Å—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

def show_vacancy_description(query, data):
    title = data.replace('vacancy_', '')
    descriptions = load_descriptions()
    description = descriptions.get(title, "–û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    query.edit_message_text(text=f"{title}\n\n{description}")
    query.message.reply_text("–ë–∞–∂–∞—î—à –ø–æ–¥–∞—Ç–∏—Å—å –Ω–∞ —Ü—é –≤–∞–∫–∞–Ω—Å—ñ—é?", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data=f"form|{title}")]
    ]))

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    if data == 'next':
        handle_next(query, context)
    elif data.startswith('group_'):
        group = data.replace('group_', '')
        show_vacancies_by_group(query, group)
    elif data.startswith('vacancy_'):
        show_vacancy_description(query, data)

def ask_phone(update: Update, context: CallbackContext) -> int:
    context.user_data["name"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return ASK_PHONE

def ask_age(update: Update, context: CallbackContext) -> int:
    context.user_data["phone"] = update.message.text
    update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    return ASK_AGE

def finish_form(update: Update, context: CallbackContext) -> int:
    context.user_data["age"] = update.message.text
    return submit_form(update, context)

def start_form(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    context.user_data['vacancy'] = query.data.split('|')[1]
    query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return ASK_NAME

# === –†–æ—É—Ç–∏–Ω–≥ Flask (Webhook) ===
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Render —ñ –ø—Ä–∞—Ü—é—î!"

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CallbackQueryHandler(button, pattern='^(next|group_.*|vacancy_.*)$'))
dispatcher.add_handler(CallbackQueryHandler(start_form, pattern=r'^form\|'))

form_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_form, pattern=r'^form\|')],
    states={
        ASK_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_phone)],
        ASK_PHONE: [MessageHandler(Filters.text & ~Filters.command, ask_age)],
        ASK_AGE: [MessageHandler(Filters.text & ~Filters.command, finish_form)],
    },
    fallbacks=[CommandHandler('cancel', cancel_form)]
)
dispatcher.add_handler(form_handler)
