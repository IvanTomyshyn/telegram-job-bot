import json
import logging

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    Filters
)
from google_sheets import write_to_google_sheet

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===

TOKEN = '7688879325:AAH_Nl7u08zZj3cTDmjHTBSkxWIEMg3XBIc'
GREETING_FILE = 'hello.txt'
VACANCIES_FILE = 'vacancies.txt'
DESCRIPTIONS_FILE = 'vacancy_descriptions.txt'
GROUPS_FILE = 'vacancy_groups.txt'

ASK_NAME, ASK_PHONE, ASK_AGE = range(3)

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –®–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ ===
VIDEO_PATH = r"C:\\Users\\admin\\Desktop\\TelegramBot\\intro.mp4"

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===

def load_greeting():
    with open(GREETING_FILE, 'r', encoding='utf-8') as file:
        return file.read()

def load_vacancies():
    with open(VACANCIES_FILE, 'r', encoding='utf-8') as file:
        return json.load(file)

def load_descriptions():
    with open(DESCRIPTIONS_FILE, 'r', encoding='utf-8') as file:
        blocks = file.read().split('\n\n')
        return {block.split(':\n')[0].strip(): block.split(':\n')[1].strip() for block in blocks if ':\n' in block}

def load_groups():
    with open(GROUPS_FILE, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    groups = {
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤': [],
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫': [],
        '–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä': []
    }
    for line in lines:
        if '-' in line:
            title, group = line.strip().split(' - ')
            if group in groups:
                groups[group].append(title.strip())
    return groups

# === –ê–Ω–∫–µ—Ç–∞ ===

def start_form(update: Update, context: CallbackContext):
    query = update.callback_query
    _, vacancy = query.data.split('|')
    context.user_data['vacancy'] = vacancy
    query.answer()
    query.message.reply_text("üë§ –í–≤–µ–¥–∏ —Å–≤–æ—î *—ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ*:", parse_mode='Markdown')
    return ASK_NAME

def ask_phone(update: Update, context: CallbackContext):
    context.user_data['name'] = update.message.text
    update.message.reply_text("üìû –í–≤–µ–¥–∏ —Å–≤—ñ–π *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:", parse_mode='Markdown')
    return ASK_PHONE

def ask_age(update: Update, context: CallbackContext):
    context.user_data['phone'] = update.message.text
    update.message.reply_text("üéÇ –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ *–ø–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤*:", parse_mode='Markdown')
    return ASK_AGE

def finish_form(update: Update, context: CallbackContext):
    context.user_data['age'] = update.message.text

    name = context.user_data['name']
    phone = context.user_data['phone']
    age = context.user_data['age']
    vacancy = context.user_data['vacancy']

    write_to_google_sheet(name, phone, age, vacancy)

    update.message.reply_text("‚úÖ *–î—è–∫—É—î–º–æ!* –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—ó –¥–∞–Ω—ñ.\n–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.", parse_mode='Markdown')

    context.bot.send_message(
        chat_id='@robota_cz_24_7',
        text=f"üì• *–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞!*\nüë§ {name}\nüìû {phone}\nüéÇ {age} —Ä–æ–∫—ñ–≤\nüíº {vacancy}",
        parse_mode='Markdown'
    )

    return ConversationHandler.END

def cancel_form(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ ===

def start(update: Update, context: CallbackContext):
    greeting = load_greeting()
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª—ñ", callback_data='next')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(greeting)
    try:
        with open(VIDEO_PATH, 'rb') as video:
            update.message.reply_video(video)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {e}")
    update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=reply_markup)

def handle_next(query, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üíÅüèª‚Äç‚ôÇÔ∏è–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤')],
        [InlineKeyboardButton("üíÅüèº‚Äç‚ôÄÔ∏è–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫')],
        [InlineKeyboardButton("üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä", callback_data='group_–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞–∫–∞–Ω—Å—ñ–π:", reply_markup=reply_markup)

def show_vacancies_by_group(query, group_name):
    groups = load_groups()
    group_vacancies = groups.get(group_name, [])
    keyboard = [
        [InlineKeyboardButton(title, callback_data=f'vacancy_{title}')]
        for title in group_vacancies
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –≤–∞–∫–∞–Ω—Å—ñ—é:", reply_markup=reply_markup)

def show_vacancy_description(query, data):
    title = data.replace('vacancy_', '')
    descriptions = load_descriptions()
    description = descriptions.get(title, "–û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    query.edit_message_text(text=f"{title}\n\n{description}")
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data=f"form|{title}")]
    ])
    query.message.reply_text("–ë–∞–∂–∞—î—à –ø–æ–¥–∞—Ç–∏—Å—å –Ω–∞ —Ü—é –≤–∞–∫–∞–Ω—Å—ñ—é?", reply_markup=reply_markup)

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    if data == 'next':
        handle_next(query, context)
    elif data.startswith('group_'):
        group = data.replace('group_', '')
        show_vacancies_by_group(query, group)
    elif data.startswith('vacancy_'):
        show_vacancy_description(query, data)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(button, pattern='^(next|group_.*|vacancy_.*)$'))

    form_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_form, pattern=r'^form\|')],
        states={
            ASK_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_phone)],
            ASK_PHONE: [MessageHandler(Filters.text & ~Filters.command, ask_age)],
            ASK_AGE: [MessageHandler(Filters.text & ~Filters.command, finish_form)],
        },
        fallbacks=[CommandHandler('cancel', cancel_form)]
    )
    dp.add_handler(form_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
