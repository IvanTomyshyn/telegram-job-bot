import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, ConversationHandler, MessageHandler, Filters
from google_sheets import write_to_google_sheet
from datetime import datetime

# === Logging ===
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# === –°—Ç–∞–Ω –¥–ª—è ConversationHandler ===
(SELECTING_CATEGORY, SELECTING_VACANCY, ASK_NAME, ASK_PHONE, ASK_AGE, CONFIRM_DATA) = range(6)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤ –∑ .txt —Ñ–∞–π–ª—ñ–≤ ===
def load_greeting():
    with open("hello.txt", "r", encoding="utf-8") as f:
        return f.read()

def load_vacancy_descriptions():
    with open("vacancy_descriptions.txt", "r", encoding="utf-8") as f:
        content = f.read()
    blocks = content.strip().split("\n\n")
    descriptions = {}
    for block in blocks:
        if " - " in block:
            title, desc = block.split(" - ", 1)
            descriptions[title.strip()] = desc.strip()
    return descriptions

def load_vacancy_groups():
    with open("vacancy_groups.txt", "r", encoding="utf-8") as f:
        lines = f.readlines()
    groups = {"men": [], "women": [], "couples": []}
    for line in lines:
        if " - " in line:
            title, group = line.strip().split(" - ")
            if group.lower() == "—á–æ–ª–æ–≤—ñ–∫–∏":
                groups["men"].append(title.strip())
            elif group.lower() == "–∂—ñ–Ω–∫–∏":
                groups["women"].append(title.strip())
            elif group.lower() == "–ø–∞—Ä–∏":
                groups["couples"].append(title.strip())
    return groups

# === –ö–æ–º–∞–Ω–¥–∏ ===
def start(update: Update, context: CallbackContext) -> int:
    greeting = load_greeting()
    update.message.reply_text(greeting)
    video_path = 'intro.mp4'
    if os.path.exists(video_path):
        with open(video_path, 'rb') as video:
            update.message.reply_video(video=InputFile(video))
    keyboard = [[InlineKeyboardButton("–î–∞–ª—ñ ‚ñ∂Ô∏è", callback_data="next")]]
    update.message.reply_text("–ü—ñ—Å–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–î–∞–ª—ñ¬ª —ñ –º–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ –≤–∞–∫–∞–Ω—Å—ñ—é, —è–∫–∞ –ø—ñ–¥—ñ–π–¥–µ —Å–∞–º–µ —Ç–æ–±—ñ üòâ", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_CATEGORY

def handle_group_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    selected = query.data
    context.user_data['group'] = selected

    groups = load_vacancy_groups()
    vacancies = groups.get(selected, [])
    if not vacancies:
        query.edit_message_text("–ù–∞ –∂–∞–ª—å, –≤–∞–∫–∞–Ω—Å—ñ–π —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(vac, callback_data=vac)] for vac in vacancies]
    query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–∫–∞–Ω—Å—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECTING_VACANCY

def handle_vacancy_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    vacancy = query.data
    context.user_data['vacancy'] = vacancy

    descriptions = load_vacancy_descriptions()
    description = descriptions.get(vacancy, "–û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    query.edit_message_text(f"*{vacancy}*\n\n{description}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", —â–æ–± –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É.",
                            parse_mode='Markdown',
                            reply_markup=InlineKeyboardMarkup(
                                [[InlineKeyboardButton("–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É üìù", callback_data="fill_form")]]))
    return ASK_NAME

def fill_form(update: Update, context: CallbackContext) -> int:
    update.callback_query.answer()
    update.callback_query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ*:", parse_mode='Markdown')
    return ASK_NAME

def ask_phone(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É* (–∑ +420 –∞–±–æ +380):", parse_mode='Markdown')
    return ASK_PHONE

def ask_age(update: Update, context: CallbackContext) -> int:
    context.user_data['phone'] = update.message.text
    update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –≤–∞–º –ø–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤?")
    return ASK_AGE

def confirm_data(update: Update, context: CallbackContext) -> int:
    context.user_data['age'] = update.message.text
    data = context.user_data
    text = f"üîé –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:\n\nüë§ –Ü–º'—è: {data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\nüéÇ –í—ñ–∫: {data['age']}\nüíº –í–∞–∫–∞–Ω—Å—ñ—è: {data['vacancy']}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏."
    keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="submit")]]
    update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_DATA

def submit_form(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    data = context.user_data
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    write_to_google_sheet([
        timestamp,
        data['name'],
        data['phone'],
        data['age'],
        data['vacancy'],
        'Telegram'
    ])
    query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∞–Ω–∫–µ—Ç—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    return ConversationHandler.END

def main():
    TOKEN = os.getenv("BOT_TOKEN")
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_CATEGORY: [
                CallbackQueryHandler(handle_group_selection, pattern='^(men|women|couples)$'),
                CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤", callback_data="men")],
                    [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –∂—ñ–Ω–æ–∫", callback_data="women")],
                    [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Å—ñ–º–µ–π–Ω–∏—Ö –ø–∞—Ä", callback_data="couples")],
                ])), pattern='^next$')
            ],
            SELECTING_VACANCY: [CallbackQueryHandler(handle_vacancy_selection)],
            ASK_NAME: [CallbackQueryHandler(fill_form, pattern='^fill_form$'), MessageHandler(Filters.text & ~Filters.command, ask_phone)],
            ASK_PHONE: [MessageHandler(Filters.text & ~Filters.command, ask_age)],
            ASK_AGE: [MessageHandler(Filters.text & ~Filters.command, confirm_data)],
            CONFIRM_DATA: [CallbackQueryHandler(submit_form, pattern='^submit$')]
        },
        fallbacks=[]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()